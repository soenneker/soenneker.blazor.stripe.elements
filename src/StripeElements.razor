@using System.Threading
@using Microsoft.JSInterop
@using Soenneker.Blazor.Stripe.Elements.Abstract
@using Soenneker.Blazor.Stripe.Elements.Configuration
@using Soenneker.Extensions.Task
@using Soenneker.Extensions.ValueTask
@using Soenneker.Blazor.Extensions.EventCallback
@using Soenneker.Blazor.Stripe.Elements.Dtos
@using Soenneker.Extensions.String

@inject IStripeElementsInterop StripeElementsInterop

@implements IStripeElements

<div id="@ElementId" @attributes="Attributes" >
    <CascadingValue Value="ElementIds">
        @ChildContent
    </CascadingValue>
</div>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?>? Attributes { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback OnInitialize { get; set; }

    public string ElementId { get; set; } = $"stripe-elements-{Guid.NewGuid()}";

    private readonly CancellationTokenSource _cTs = new();

    private DotNetObjectReference<StripeElements>? _dotNetReference;

    [Parameter]
    public StripeElementsConfiguration? Configuration { get; set; }

    [Parameter]
    public bool Log { get; set; }

    [Parameter]
    public bool ManuallyInitialize { get; set; }

    public Dictionary<Type, string> ElementIds { get; set; } = new()
    {
        {typeof(StripeAddressElement), $"stripe-address-{Guid.NewGuid()}"},
        {typeof(StripeLinkAuthenticationElement), $"stripe-link-auth-{Guid.NewGuid()}"},
        {typeof(StripePaymentElement), $"stripe-payment-{Guid.NewGuid()}"}
    };

    private bool _initialized;
    private bool _createCalled;

    protected override async Task OnInitializedAsync()
    {
        await StripeElementsInterop.Initialize(_cTs.Token).NoSync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !ManuallyInitialize)
        {
            await Initialize(null, _cTs.Token).NoSync();
        }
    }

    public async ValueTask Initialize(StripeElementsConfiguration? configuration = null, CancellationToken cancellationToken = default)
    {
        if (_createCalled)
            throw new InvalidOperationException("StripeElements has already been Initialized");

        _createCalled = true;
        _initialized = true;

        if (configuration != null)
            Configuration = configuration;

        if (Configuration == null)
            throw new InvalidOperationException("StripeElements Configuration must be set");

        if (Configuration.AddressElementId == null)
            ElementIds[typeof(StripeAddressElement)] = $"stripe-address-{Guid.NewGuid()}";

        if (Configuration.LinkAuthenticationElementId == null)
            ElementIds[typeof(StripeLinkAuthenticationElement)] = $"stripe-link-auth-{Guid.NewGuid()}";

        if (Configuration.PaymentElementId == null)
            ElementIds[typeof(StripePaymentElement)] = $"stripe-payment-{Guid.NewGuid()}";

        Configuration.AddressElementId ??= ElementIds[typeof(StripeAddressElement)];
        Configuration.LinkAuthenticationElementId ??= ElementIds[typeof(StripeLinkAuthenticationElement)];
        Configuration.PaymentElementId ??= ElementIds[typeof(StripePaymentElement)];

        _dotNetReference = DotNetObjectReference.Create(this);

        using CancellationTokenSource? linkedCts = cancellationToken != _cTs.Token ? CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token) : null;

        CancellationToken token = linkedCts?.Token ?? _cTs.Token;

        await StripeElementsInterop.Create(ElementId, _dotNetReference, Configuration, token).NoSync();
        await StripeElementsInterop.CreateObserver(ElementId, token).NoSync();
    }

    public async ValueTask<StripeConfirmResult?> ConfirmPayment(string returnUrl, string? paymentIntentClientSecret = null, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Stripe Elements has not been initialized yet.");

        paymentIntentClientSecret ??= Configuration?.ElementsOptions?.ClientSecret;

        if (paymentIntentClientSecret.IsNullOrWhiteSpace())
            throw new InvalidOperationException("PaymentIntent client secret is missing.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await StripeElementsInterop.ConfirmPayment(ElementId, paymentIntentClientSecret, returnUrl, linkedCts.Token);
    }

    public async ValueTask<StripeConfirmResult?> ConfirmSetup(string returnUrl, string? setupIntentClientSecret = null, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Stripe Elements has not been initialized yet.");

        setupIntentClientSecret ??= Configuration?.ElementsOptions?.ClientSecret;

        if (setupIntentClientSecret.IsNullOrWhiteSpace())
            throw new InvalidOperationException("SetupIntent client secret is missing.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await StripeElementsInterop.ConfirmSetup(ElementId, setupIntentClientSecret, returnUrl, linkedCts.Token);
    }

    public async ValueTask<StripeSubmitResult?> Submit(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Stripe Elements has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await StripeElementsInterop.Submit(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Unmount(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Stripe Elements has not been initialized yet.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await StripeElementsInterop.Unmount(ElementId, linkedCts.Token).NoSync();
    }

    [JSInvokable("OnInitializedJs")]
    public async Task OnInitializedJs()
    {
        await OnInitialize.InvokeIfHasDelegate().NoSync();
    }

    public async ValueTask DisposeAsync()
    {
        GC.SuppressFinalize(this);

        _dotNetReference?.Dispose();

        await _cTs.CancelAsync().NoSync();
    }

}