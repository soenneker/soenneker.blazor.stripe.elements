@using System.Threading
@using Microsoft.JSInterop
@using Soenneker.Blazor.Extensions.EventCallback
@using Soenneker.Blazor.Stripe.Elements.Abstract
@using Soenneker.Blazor.Stripe.Elements.Configuration
@using Soenneker.Blazor.Stripe.Elements.Dtos
@using Soenneker.Extensions.CancellationTokens
@using Soenneker.Extensions.String

@inject IStripeElementsInterop StripeElementsInterop

@inherits Soenneker.Quark.CoreCancellableElement
@implements IStripeElements

<div id="@Id" @attributes="Attributes">
    <CascadingValue Value="ElementIds" >
        @ChildContent
    </CascadingValue>
</div>

@code {

    [Parameter]
    public EventCallback OnInitialize { get; set; }

    [Parameter]
    public EventCallback OnElementRendered { get; set; }

    [Parameter]
    public EventCallback OnPaymentElementReady { get; set; }

    [Parameter]
    public EventCallback OnAddressElementReady { get; set; }

    [Parameter]
    public EventCallback OnLinkAuthenticationElementReady { get; set; }

    [Parameter]
    public EventCallback<StripeSubmitResult?> OnAfterSubmit { get; set; }

    [Parameter]
    public EventCallback<StripeConfirmResult?> OnAfterConfirmPayment { get; set; }

    [Parameter]
    public EventCallback<StripeConfirmResult?> OnAfterConfirmSetup { get; set; }

    [Parameter]
    public override string? Id { get; set; } = $"stripe-elements-{Guid.NewGuid()}";

    private DotNetObjectReference<StripeElements>? _dotNetReference;

    [Parameter]
    public StripeElementsConfiguration? Configuration { get; set; }

    [Parameter]
    public bool Log { get; set; }

    [Parameter]
    public bool ManuallyInitialize { get; set; }

    public Dictionary<Type, string> ElementIds { get; set; } = new()
    {
        {typeof(StripeAddressElement), $"stripe-address-{Guid.NewGuid()}"},
        {typeof(StripeLinkAuthenticationElement), $"stripe-link-auth-{Guid.NewGuid()}"},
        {typeof(StripePaymentElement), $"stripe-payment-{Guid.NewGuid()}"}
    };

    private bool _initialized;
    private bool _createCalled;

    protected override async Task OnInitializedAsync()
    {
        await StripeElementsInterop.Initialize(CancellationToken);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await OnElementRendered.InvokeIfHasDelegate();

            if (!ManuallyInitialize)
                await Initialize(null, CancellationToken);
        }
    }

    public async ValueTask LoadStripe(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await StripeElementsInterop.LoadStripe(linked);
    }

    public async ValueTask Initialize(StripeElementsConfiguration? configuration = null, CancellationToken cancellationToken = default)
    {
        if (_createCalled)
            throw new InvalidOperationException("StripeElements has already been Initialized");

        _createCalled = true;
        _initialized = true;

        if (configuration != null)
            Configuration = configuration;

        if (Configuration == null)
            throw new InvalidOperationException("StripeElements Configuration must be set");

        Configuration.AddressElementId ??= ElementIds[typeof(StripeAddressElement)];
        Configuration.LinkAuthenticationElementId ??= ElementIds[typeof(StripeLinkAuthenticationElement)];
        Configuration.PaymentElementId ??= ElementIds[typeof(StripePaymentElement)];

        _dotNetReference = DotNetObjectReference.Create(this);

        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
        {
            await StripeElementsInterop.Create(Id!, _dotNetReference, Configuration, linked);
            await StripeElementsInterop.CreateObserver(Id!, linked);
        }
    }

    public async ValueTask<StripeConfirmResult?> ConfirmPayment(string returnUrl, string? paymentIntentClientSecret = null, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Stripe Elements has not been initialized yet.");

        paymentIntentClientSecret ??= Configuration?.ElementsOptions?.ClientSecret;

        if (paymentIntentClientSecret.IsNullOrWhiteSpace())
            throw new InvalidOperationException("PaymentIntent client secret is missing.");

        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
        {
            StripeConfirmResult? result = await StripeElementsInterop.ConfirmPayment(Id!, paymentIntentClientSecret, returnUrl, linked);
            await OnAfterConfirmPayment.InvokeIfHasDelegate(result);
            return result;
        }
    }

    public async ValueTask<StripeConfirmResult?> ConfirmSetup(string returnUrl, string? setupIntentClientSecret = null, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Stripe Elements has not been initialized yet.");

        setupIntentClientSecret ??= Configuration?.ElementsOptions?.ClientSecret;

        if (setupIntentClientSecret.IsNullOrWhiteSpace())
            throw new InvalidOperationException("SetupIntent client secret is missing.");

        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
        {
            StripeConfirmResult? result = await StripeElementsInterop.ConfirmSetup(Id!, setupIntentClientSecret, returnUrl, linked);
            await OnAfterConfirmSetup.InvokeIfHasDelegate(result);
            return result;
        }
    }

    public async ValueTask<StripeSubmitResult?> Submit(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Stripe Elements has not been initialized yet.");

        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
        {
            StripeSubmitResult? result = await StripeElementsInterop.Submit(Id!, linked);
            await OnAfterSubmit.InvokeIfHasDelegate(result);
            return result;
        }
    }

    public async ValueTask Update(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Stripe Elements has not been initialized yet.");

        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await StripeElementsInterop.Update(Id!, linked);
    }

    public async ValueTask Unmount(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Stripe Elements has not been initialized yet.");

        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await StripeElementsInterop.Unmount(Id!, linked);
    }

    [JSInvokable("OnInitializedJs")]
    public Task OnInitializedJs()
    {
        return OnInitialize.InvokeIfHasDelegate();
    }

    [JSInvokable("OnPaymentElementReadyJs")]
    public Task OnPaymentElementReadyJs()
    {
        return OnPaymentElementReady.InvokeIfHasDelegate();
    }

    [JSInvokable("OnAddressElementReadyJs")]
    public Task OnAddressElementReadyJs()
    {
        return OnAddressElementReady.InvokeIfHasDelegate();
    }

    [JSInvokable("OnLinkAuthenticationElementReadyJs")]
    public Task OnLinkAuthenticationElementReadyJs()
    {
        return OnLinkAuthenticationElementReady.InvokeIfHasDelegate();
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();

        _dotNetReference?.Dispose();
    }

}
