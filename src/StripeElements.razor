@using System.Threading
@using Microsoft.JSInterop
@using Soenneker.Blazor.Stripe.Elements.Abstract
@using Soenneker.Blazor.Stripe.Elements.Configuration
@using Soenneker.Extensions.Object
@using Soenneker.Extensions.Task
@using Soenneker.Extensions.ValueTask
@inject IStripeElementsInterop StripeElementsInterop

@implements IAsyncDisposable

<div id="@ElementId" @attributes="Attributes" >
    <CascadingValue Value="_elementIds" >
        @ChildContent
    </CascadingValue>
</div>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?>? Attributes { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback OnInitialize { get; set; }

    [Parameter]
    public EventCallback<string> OnValidatePayment { get; set; }

    [Parameter]
    public EventCallback<string> OnSubmitPayment { get; set; }

    public string ElementId = $"stripe-elements-{Guid.NewGuid().ToString()}";

    private readonly CancellationTokenSource _cTs = new();

    private DotNetObjectReference<StripeElements>? _dotNetReference;

    [Parameter]
    public StripeElementsConfiguration? StripeElementsConfiguration { get; set; }

    private readonly Dictionary<Type, string> _elementIds = new()
    {
        {typeof(StripeAddressElement), $"stripe-address-{Guid.NewGuid()}"},
        {typeof(StripeLinkAuthenticationElement), $"stripe-link-auth-{Guid.NewGuid()}"},
        {typeof(StripePaymentElement), $"stripe-payment-{Guid.NewGuid()}"}
    };

    protected override async Task OnInitializedAsync()
    {
        await StripeElementsInterop.Initialize().NoSync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Initialize().NoSync();
        }
    }

    public async ValueTask Initialize(StripeElementsConfiguration? configuration = null, CancellationToken cancellationToken = default)
    {
        if (configuration != null)
            StripeElementsConfiguration = configuration;

        StripeElementsConfiguration.ThrowIfNull();

        StripeElementsConfiguration.AddressElementId ??= _elementIds[typeof(StripeAddressElement)];
        StripeElementsConfiguration.LinkAuthenticationElementId ??= _elementIds[typeof(StripeLinkAuthenticationElement)];
        StripeElementsConfiguration.PaymentElementId ??= _elementIds[typeof(StripePaymentElement)];

        _dotNetReference = DotNetObjectReference.Create(this);

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await StripeElementsInterop.Create(ElementId, _dotNetReference, StripeElementsConfiguration, linkedCts.Token).NoSync();
        await StripeElementsInterop.CreateObserver(ElementId, linkedCts.Token).NoSync();
    }

    public ValueTask ValidatePayment(CancellationToken cancellationToken = default)
    {
        return StripeElementsInterop.ValidatePayment(ElementId, _dotNetReference, cancellationToken);
    }

    public ValueTask SubmitPayment(string paymentIntent, string returnUrl, CancellationToken cancellationToken = default)
    {
        return StripeElementsInterop.SubmitPayment(ElementId, paymentIntent, returnUrl, _dotNetReference, cancellationToken);
    }

    [JSInvokable("OnInitializedJs")]
    public async Task OnInitializedJs()
    {
        if (OnInitialize.HasDelegate)
            await OnInitialize.InvokeAsync().NoSync();
    }

    [JSInvokable("OnValidatePaymentJs")]
    public async Task OnValidatePaymentJs()
    {
        if (OnValidatePayment.HasDelegate)
            await OnValidatePayment.InvokeAsync().NoSync();
    }

    [JSInvokable("OnSubmitPaymentJs")]
    public async Task OnSubmitPaymentJs()
    {
        if (OnSubmitPayment.HasDelegate)
            await OnSubmitPayment.InvokeAsync().NoSync();
    }

    public async ValueTask DisposeAsync()
    {
        GC.SuppressFinalize(this);

        _dotNetReference?.Dispose();

        await _cTs.CancelAsync().NoSync();
    }

}