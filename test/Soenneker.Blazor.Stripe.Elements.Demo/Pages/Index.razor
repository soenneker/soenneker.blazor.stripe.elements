@page "/"

@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.Stripe.Elements.Configuration
@using Soenneker.Blazor.Stripe.Elements.Configuration.Address
@using Soenneker.Blazor.Stripe.Elements.Configuration.Appearance
@using Soenneker.Blazor.Stripe.Elements.Configuration.Elements
@using Soenneker.Blazor.Stripe.Elements.Configuration.Initialization
@using Soenneker.Blazor.Stripe.Elements.Configuration.LinkAuthentication
@using Soenneker.Blazor.Stripe.Elements.Configuration.Payment
@using Soenneker.Blazor.Stripe.Elements.Enums
@using Soenneker.Dtos.Stripe.Error
@using Soenneker.Enums.CurrencyCodes
@using Soenneker.Utils.AutoBogus

@inject ILogger<Index> Logger

<Container class="py-5" >
    <div class="text-center mb-4" >
        <img src="https://user-images.githubusercontent.com/4441470/224455560-91ed3ee7-f510-4041-a8d2-3fc093025112.png" style="height: 60px;" />
        <h1 class="mt-3 fw-semibold" >Stripe Elements Demo</h1>
        <p class="text-muted" >A clean integration demo of Soenneker.Blazor.Stripe.Elements</p>
    </div>

    <StripeElements @ref="_stripeElements"
                    StripeElementsConfiguration="_config"
                    OnSubmitPayment="StripeSubmitPaymentCallback"
                    OnValidatePayment="StripeValidatePaymentCallback" >

        <StripeAddressElement />
        <StripeLinkAuthenticationElement />
        <StripePaymentElement />

        <Button Loading="_buttonLoading" Color="Color.Primary" Clicked="Submit" >Submit</Button>
    </StripeElements>

    <div class="mt-4 pt-3 border-top" >
        <Anchor To="/second" >Go to second</Anchor>
    </div>
</Container>

@code {
    private StripeElements? _stripeElements;
    private bool _buttonLoading;
    private StripeElementsConfiguration? _config;

    public AutoFaker AutoFaker { get; set; } = new();

    protected override void OnInitialized()
    {
        _config = new StripeElementsConfiguration
            {
                PublishableKey = "",

                InitializationOptions = new StripeInitializationOptions
                {
                    DeveloperTools = new StripeDeveloperToolsOptions
                    {
                        Assistant = new StripeDeveloperAssistantOptions { Enabled = true }
                    }
                },

                ElementsOptions = new StripeElementsOptions
                {
                    Appearance = new StripeAppearance
                    {
                        Theme = StripeElementsTheme.Flat,
                        Variables = new StripeAppearanceVariablesExtended { BorderRadius = "0" }
                    },
                    Locale = "auto",
                    Mode = StripeElementsMode.Setup,
                    Currency = CurrencyCode.Usd
                },

                LinkAuthenticationOptions = new StripeLinkAuthenticationOptions
                {
                    DefaultValues = new StripeLinkAuthenticationDefaultValues
                    {
                        Email = "test@example.com"
                    }
                },

                PaymentOptions = new StripePaymentElementOptions
                {
                    Layout = "tabs"
                },

                AddressOptions = new StripeAddressOptions
                {
                    Mode = StripeAddressMode.Billing,
                    DefaultValues = new StripeAddressDefaultValues
                    {
                        Name = AutoFaker.Faker.Person.FullName,
                        Address = new StripeAddressDetails
                        {
                            Line1 = AutoFaker.Faker.Address.StreetAddress(),
                            City = AutoFaker.Faker.Address.City(),
                            State = AutoFaker.Faker.Address.State(),
                            Country = "US",
                            PostalCode = AutoFaker.Faker.Address.ZipCode()
                        }
                    },
                    AllowedCountries = ["US", "CA"],
                    Fields = new StripeAddressFields
                    {
                        Phone = StripeAddressFieldsPhoneOption.Auto
                    }
                }
            };
    }

    private async Task Submit()
    {
        _buttonLoading = true;

        try
        {
            await _stripeElements!.ValidatePayment();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error validating payment");
            _buttonLoading = false;
        }
    }

    public async Task StripeValidatePaymentCallback(StripeErrorDto? stripeErrorDto)
    {
        if (stripeErrorDto != null)
        {
            _buttonLoading = false;
            StateHasChanged();
            return;
        }

        await SubmitPaymentIntent();
    }

    private async Task SubmitPaymentIntent()
    {
        await _stripeElements!.SubmitPayment("intent", "https://localhost:7039");
    }

    public async Task StripeSubmitPaymentCallback(StripeErrorDto? stripeErrorDto)
    {
        if (stripeErrorDto != null)
        {
            _buttonLoading = false;
            StateHasChanged();
        }
    }

}